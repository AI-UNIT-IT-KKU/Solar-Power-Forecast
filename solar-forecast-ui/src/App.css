import React, { useState } from 'react';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Sun, MapPin, Calendar, Settings, Zap, TrendingUp, Download, Activity, Loader } from 'lucide-react';

// Inline styles object
const styles = {
  container: {
    minHeight: '100vh',
    background: 'linear-gradient(to bottom right, #f8fafc, #f1f5f9)',
  },
  header: {
    background: 'linear-gradient(to right, #f97316, #fbbf24)',
    color: 'white',
    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)',
  },
  card: {
    backgroundColor: 'white',
    borderRadius: '1rem',
    boxShadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1)',
    padding: '1.5rem',
  },
  input: {
    width: '100%',
    padding: '0.625rem 1rem',
    border: '1px solid #cbd5e1',
    borderRadius: '0.5rem',
    fontSize: '0.875rem',
    transition: 'all 0.2s',
  },
  button: {
    width: '100%',
    background: 'linear-gradient(to right, #f97316, #fbbf24)',
    color: 'white',
    fontWeight: '600',
    padding: '0.75rem',
    borderRadius: '0.75rem',
    border: 'none',
    cursor: 'pointer',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    gap: '0.5rem',
    transition: 'all 0.2s',
  },
  metricCard: {
    borderRadius: '0.75rem',
    padding: '1.25rem',
    color: 'white',
    boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1)',
  },
  tab: {
    flex: 1,
    padding: '1rem 1.5rem',
    fontWeight: '600',
    border: 'none',
    background: 'none',
    cursor: 'pointer',
    transition: 'all 0.2s',
  },
  tableHeader: {
    backgroundColor: '#f8fafc',
    position: 'sticky',
    top: 0,
  },
  tableRow: {
    borderBottom: '1px solid #f1f5f9',
    transition: 'background-color 0.2s',
  },
};

const SolarForecastApp = () => {
  const [config, setConfig] = useState({
    latitude: 24.7136,
    longitude: 46.6753,
    start_date: new Date().toISOString().split('T')[0],
    horizon_days: 7,
    timezone: 'Asia/Riyadh',
    tilt: 25.0,
    azimuth: 180.0,
    noct: 45.0,
    use_minutely: true,
    smooth_hours: 3
  });

  const [forecast, setForecast] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('overview');

  const handleInputChange = (field, value) => {
    setConfig(prev => ({ ...prev, [field]: value }));
  };

  const generateForecast = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('http://localhost:8000/forecast', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(config)
      });
      
      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }
      
      const data = await response.json();
      setForecast(data);
    } catch (err) {
      setError(err.message || 'Failed to generate forecast. Ensure FastAPI is running on port 8000.');
    } finally {
      setLoading(false);
    }
  };

  const downloadCSV = (data, filename) => {
    const csv = data.map(row => Object.values(row).join(',')).join('\n');
    const header = Object.keys(data[0]).join(',') + '\n';
    const blob = new Blob([header + csv], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
  };

  const formatHourlyData = () => {
    if (!forecast) return [];
    return forecast.hourly_data.slice(0, 72).map(item => ({
      time: new Date(item.timestamp).toLocaleString('en-US', { 
        month: 'short', day: 'numeric', hour: '2-digit' 
      }),
      power: Math.round(item.power_w)
    }));
  };

  const formatDailyData = () => {
    if (!forecast) return [];
    return forecast.daily_data.map(item => ({
      date: item.date,
      energy: parseFloat(item.energy_kwh.toFixed(2)),
      peak: Math.round(item.peak_power_w)
    }));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      {/* Header */}
      <header className="bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-lg">
        <div className="max-w-7xl mx-auto px-6 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Sun className="w-10 h-10" />
              <div>
                <h1 className="text-3xl font-bold">Solar Forecast Pro</h1>
                <p className="text-orange-100 text-sm">AI-Powered Solar Energy Prediction</p>
              </div>
            </div>
            <div className="text-right">
              <div className="text-sm text-orange-100">FastAPI Backend</div>
              <div className="text-xs text-orange-200">v1.0.0</div>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Configuration Panel */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-2xl shadow-xl p-6 sticky top-6">
              <h2 className="text-xl font-bold text-slate-800 mb-6 flex items-center gap-2">
                <Settings className="w-5 h-5 text-orange-500" />
                Configuration
              </h2>

              {/* Location */}
              <div className="mb-6">
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <MapPin className="w-4 h-4 text-orange-500" />
                  Location
                </label>
                <div className="space-y-3">
                  <input
                    type="number"
                    placeholder="Latitude"
                    value={config.latitude}
                    onChange={(e) => handleInputChange('latitude', parseFloat(e.target.value))}
                    className="w-full px-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent transition"
                  />
                  <input
                    type="number"
                    placeholder="Longitude"
                    value={config.longitude}
                    onChange={(e) => handleInputChange('longitude', parseFloat(e.target.value))}
                    className="w-full px-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent transition"
                  />
                  <input
                    type="text"
                    placeholder="Timezone"
                    value={config.timezone}
                    onChange={(e) => handleInputChange('timezone', e.target.value)}
                    className="w-full px-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent transition"
                  />
                </div>
              </div>

              {/* Forecast Period */}
              <div className="mb-6">
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <Calendar className="w-4 h-4 text-orange-500" />
                  Forecast Period
                </label>
                <div className="space-y-3">
                  <input
                    type="date"
                    value={config.start_date}
                    onChange={(e) => handleInputChange('start_date', e.target.value)}
                    className="w-full px-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent transition"
                  />
                  <div className="flex items-center gap-2">
                    <input
                      type="number"
                      min="1"
                      max="16"
                      value={config.horizon_days}
                      onChange={(e) => handleInputChange('horizon_days', parseInt(e.target.value))}
                      className="w-20 px-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent transition"
                    />
                    <span className="text-sm text-slate-600">days</span>
                  </div>
                </div>
              </div>

              {/* Panel Configuration */}
              <div className="mb-6">
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <Activity className="w-4 h-4 text-orange-500" />
                  Panel Setup
                </label>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-slate-600">Tilt</span>
                    <div className="flex items-center gap-2">
                      <input
                        type="number"
                        min="0"
                        max="90"
                        value={config.tilt}
                        onChange={(e) => handleInputChange('tilt', parseFloat(e.target.value))}
                        className="w-20 px-3 py-1.5 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-orange-500 focus:border-transparent transition"
                      />
                      <span className="text-xs text-slate-500">Â°</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-slate-600">Azimuth</span>
                    <div className="flex items-center gap-2">
                      <input
                        type="number"
                        min="0"
                        max="360"
                        value={config.azimuth}
                        onChange={(e) => handleInputChange('azimuth', parseFloat(e.target.value))}
                        className="w-20 px-3 py-1.5 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-orange-500 focus:border-transparent transition"
                      />
                      <span className="text-xs text-slate-500">Â°</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-slate-600">NOCT</span>
                    <div className="flex items-center gap-2">
                      <input
                        type="number"
                        min="30"
                        max="60"
                        value={config.noct}
                        onChange={(e) => handleInputChange('noct', parseFloat(e.target.value))}
                        className="w-20 px-3 py-1.5 border border-slate-300 rounded-lg text-sm focus:ring-2 focus:ring-orange-500 focus:border-transparent transition"
                      />
                      <span className="text-xs text-slate-500">Â°C</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Processing Options */}
              <div className="mb-6 space-y-3">
                <label className="flex items-center gap-3 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={config.use_minutely}
                    onChange={(e) => handleInputChange('use_minutely', e.target.checked)}
                    className="w-4 h-4 text-orange-500 rounded focus:ring-orange-500"
                  />
                  <span className="text-sm text-slate-700">1-minute resolution</span>
                </label>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-slate-600">Smoothing</span>
                  <div className="flex items-center gap-2">
                    <input
                      type="range"
                      min="0"
                      max="6"
                      value={config.smooth_hours}
                      onChange={(e) => handleInputChange('smooth_hours', parseInt(e.target.value))}
                      className="w-24"
                    />
                    <span className="text-xs text-slate-500 w-8">{config.smooth_hours}h</span>
                  </div>
                </div>
              </div>

              {/* Generate Button */}
              <button
                onClick={generateForecast}
                disabled={loading}
                className="w-full bg-gradient-to-r from-orange-500 to-amber-500 text-white font-semibold py-3 rounded-xl hover:from-orange-600 hover:to-amber-600 transition shadow-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                {loading ? (
                  <>
                    <Loader className="w-5 h-5 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Zap className="w-5 h-5" />
                    Generate Forecast
                  </>
                )}
              </button>

              {error && (
                <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                  <p className="text-sm text-red-700">{error}</p>
                  <p className="text-xs text-red-600 mt-1">Make sure FastAPI is running on localhost:8000</p>
                </div>
              )}
            </div>
          </div>

          {/* Results Panel */}
          <div className="lg:col-span-2">
            {!forecast && !loading && (
              <div className="bg-white rounded-2xl shadow-xl p-12 text-center">
                <Sun className="w-20 h-20 text-orange-300 mx-auto mb-4" />
                <h3 className="text-2xl font-bold text-slate-800 mb-2">Ready to Forecast</h3>
                <p className="text-slate-600">Configure your parameters and click "Generate Forecast" to begin</p>
              </div>
            )}

            {forecast && (
              <>
                {/* Metrics Cards */}
                <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                  <div className="bg-gradient-to-br from-orange-500 to-amber-500 rounded-xl p-5 text-white shadow-lg">
                    <div className="flex items-center justify-between mb-2">
                      <Zap className="w-6 h-6 opacity-80" />
                    </div>
                    <div className="text-3xl font-bold">{forecast.total_energy_kwh.toFixed(1)}</div>
                    <div className="text-xs text-orange-100 mt-1">Total Energy (kWh)</div>
                  </div>
                  
                  <div className="bg-gradient-to-br from-blue-500 to-cyan-500 rounded-xl p-5 text-white shadow-lg">
                    <div className="flex items-center justify-between mb-2">
                      <TrendingUp className="w-6 h-6 opacity-80" />
                    </div>
                    <div className="text-3xl font-bold">{Math.round(forecast.peak_power_w)}</div>
                    <div className="text-xs text-blue-100 mt-1">Peak Power (W)</div>
                  </div>
                  
                  <div className="bg-gradient-to-br from-purple-500 to-pink-500 rounded-xl p-5 text-white shadow-lg">
                    <div className="flex items-center justify-between mb-2">
                      <Activity className="w-6 h-6 opacity-80" />
                    </div>
                    <div className="text-3xl font-bold">{forecast.avg_daily_energy_kwh.toFixed(1)}</div>
                    <div className="text-xs text-purple-100 mt-1">Avg Daily (kWh)</div>
                  </div>
                  
                  <div className="bg-gradient-to-br from-green-500 to-emerald-500 rounded-xl p-5 text-white shadow-lg">
                    <div className="flex items-center justify-between mb-2">
                      <Calendar className="w-6 h-6 opacity-80" />
                    </div>
                    <div className="text-3xl font-bold">{forecast.days_forecasted}</div>
                    <div className="text-xs text-green-100 mt-1">Days Forecasted</div>
                  </div>
                </div>

                {/* Tabs */}
                <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
                  <div className="border-b border-slate-200">
                    <div className="flex">
                      {['overview', 'hourly', 'daily'].map(tab => (
                        <button
                          key={tab}
                          onClick={() => setActiveTab(tab)}
                          className={`flex-1 px-6 py-4 font-semibold transition ${
                            activeTab === tab
                              ? 'text-orange-500 border-b-2 border-orange-500 bg-orange-50'
                              : 'text-slate-600 hover:text-slate-800 hover:bg-slate-50'
                          }`}
                        >
                          {tab.charAt(0).toUpperCase() + tab.slice(1)}
                        </button>
                      ))}
                    </div>
                  </div>

                  <div className="p-6">
                    {activeTab === 'overview' && (
                      <div className="space-y-6">
                        <div>
                          <h3 className="text-lg font-bold text-slate-800 mb-4">Power Forecast (72h)</h3>
                          <ResponsiveContainer width="100%" height={300}>
                            <LineChart data={formatHourlyData()}>
                              <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" />
                              <XAxis dataKey="time" tick={{ fontSize: 12 }} />
                              <YAxis tick={{ fontSize: 12 }} />
                              <Tooltip 
                                contentStyle={{ 
                                  backgroundColor: '#fff', 
                                  border: '1px solid #e2e8f0',
                                  borderRadius: '8px',
                                  boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
                                }}
                              />
                              <Legend />
                              <Line type="monotone" dataKey="power" stroke="#f97316" strokeWidth={3} name="Power (W)" />
                            </LineChart>
                          </ResponsiveContainer>
                        </div>

                        <div>
                          <h3 className="text-lg font-bold text-slate-800 mb-4">Daily Energy Production</h3>
                          <ResponsiveContainer width="100%" height={300}>
                            <BarChart data={formatDailyData()}>
                              <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" />
                              <XAxis dataKey="date" tick={{ fontSize: 12 }} />
                              <YAxis tick={{ fontSize: 12 }} />
                              <Tooltip 
                                contentStyle={{ 
                                  backgroundColor: '#fff', 
                                  border: '1px solid #e2e8f0',
                                  borderRadius: '8px',
                                  boxShadow: '0 4px 6px rgba(0,0,0,0.1)'
                                }}
                              />
                              <Legend />
                              <Bar dataKey="energy" fill="#f59e0b" name="Energy (kWh)" />
                            </BarChart>
                          </ResponsiveContainer>
                        </div>
                      </div>
                    )}

                    {activeTab === 'hourly' && (
                      <div>
                        <div className="flex justify-between items-center mb-4">
                          <h3 className="text-lg font-bold text-slate-800">Hourly Data</h3>
                          <button
                            onClick={() => downloadCSV(forecast.hourly_data, 'hourly_forecast.csv')}
                            className="flex items-center gap-2 px-4 py-2 bg-slate-100 hover:bg-slate-200 rounded-lg transition text-sm font-medium text-slate-700"
                          >
                            <Download className="w-4 h-4" />
                            Download CSV
                          </button>
                        </div>
                        <div className="max-h-96 overflow-y-auto">
                          <table className="w-full text-sm">
                            <thead className="bg-slate-50 sticky top-0">
                              <tr>
                                <th className="px-4 py-3 text-left font-semibold text-slate-700">Time</th>
                                <th className="px-4 py-3 text-right font-semibold text-slate-700">Power (W)</th>
                              </tr>
                            </thead>
                            <tbody>
                              {forecast.hourly_data.map((item, idx) => (
                                <tr key={idx} className="border-b border-slate-100 hover:bg-slate-50">
                                  <td className="px-4 py-3 text-slate-600">{new Date(item.timestamp).toLocaleString()}</td>
                                  <td className="px-4 py-3 text-right font-medium text-slate-800">{Math.round(item.power_w)}</td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    )}

                    {activeTab === 'daily' && (
                      <div>
                        <div className="flex justify-between items-center mb-4">
                          <h3 className="text-lg font-bold text-slate-800">Daily Summary</h3>
                          <button
                            onClick={() => downloadCSV(forecast.daily_data, 'daily_forecast.csv')}
                            className="flex items-center gap-2 px-4 py-2 bg-slate-100 hover:bg-slate-200 rounded-lg transition text-sm font-medium text-slate-700"
                          >
                            <Download className="w-4 h-4" />
                            Download CSV
                          </button>
                        </div>
                        <div className="overflow-x-auto">
                          <table className="w-full text-sm">
                            <thead className="bg-slate-50">
                              <tr>
                                <th className="px-4 py-3 text-left font-semibold text-slate-700">Date</th>
                                <th className="px-4 py-3 text-right font-semibold text-slate-700">Mean (W)</th>
                                <th className="px-4 py-3 text-right font-semibold text-slate-700">Peak (W)</th>
                                <th className="px-4 py-3 text-right font-semibold text-slate-700">Energy (kWh)</th>
                              </tr>
                            </thead>
                            <tbody>
                              {forecast.daily_data.map((item, idx) => (
                                <tr key={idx} className="border-b border-slate-100 hover:bg-slate-50">
                                  <td className="px-4 py-3 text-slate-600">{item.date}</td>
                                  <td className="px-4 py-3 text-right font-medium text-slate-800">{Math.round(item.mean_power_w)}</td>
                                  <td className="px-4 py-3 text-right font-medium text-slate-800">{Math.round(item.peak_power_w)}</td>
                                  <td className="px-4 py-3 text-right font-medium text-orange-600">{item.energy_kwh.toFixed(2)}</td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </>
            )}
          </div>
        </div>
      </div>

      {/* Footer */}
      <footer className="mt-12 py-6 bg-white border-t border-slate-200">
        <div className="max-w-7xl mx-auto px-6 text-center text-sm text-slate-600">
          <p>Solar Forecast Pro â¢ Powered by FastAPI & React â¢ XGBoost ML Model</p>
        </div>
      </footer>
    </div>
  );
};

export default SolarForecastApp;